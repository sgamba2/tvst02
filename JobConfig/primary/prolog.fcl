#
# Prolog to create signal, signal-like, or calibration particles, producing subsequent detector steps
#
#include "Offline/TrackerMC/fcl/prolog.fcl"
#include "Offline/CaloMC/fcl/prolog.fcl"
#include "Offline/CRVResponse/fcl/prolog.fcl"
#include "Offline/Filters/fcl/prolog.fcl"
#include "Offline/Compression/fcl/prolog.fcl"
#
BEGIN_PROLOG

Primary: {
  producers : {
    @table::TrackerMC.StepProducers
    @table::CaloMC.StepProducers
    CrvSteps :{
      @table::CrvSteps
      stepPointsModuleLabels : ["g4run"]
    }
    compressDetStepMCs : {
      module_type : CompressDetStepMCs
      strawGasStepTag : "StrawGasStepMaker"
      caloShowerStepTag : "CaloShowerStepMaker"
      crvStepTag : "CrvSteps"
      simParticleTags : [ "g4run" ]
      mcTrajectoryTag : "g4run"
      debugLevel : 0
      # save StepPoints in VDs, ProtonAbsorber and ST
      stepPointMCTags : [ "g4run:virtualdetector", "g4run:protonabsorber", "g4run:stoppingtarget" ]
      compressionOptions : @local::DetStepCompression.standardCompression
    }
    FindMCPrimary : {
      module_type : FindMCPrimary
      SimParticles : "compressDetStepMCs"
    }
    # null MCPrimary, for NoPrimary events
    NullMCPrimary : {
      module_type: NullMCPrimary
      ExtraSteps : [ "virtualdetector", "stoppingtarget", "protonabsorber" ] # these will be created but empty
    }
 }

  filters : {
    # basic step filter configuration: these can get refined for particular primaries

    # step filter for signal-like or calibration particles.  This gets customized by downstream scripts
   # PrimaryFilter : {
    #  module_type : DetectorStepFilter
     # StrawGasSteps : [ "StrawGasStepMaker" ]
     # CaloShowerSteps : [ "CaloShowerStepMaker" ]
      #CrvSteps : [ ] # dont filter on CRV since that can't trigger
     # MinimumTrkStepEnergy : 1.0e-6 # 1 ev
     # MinimumCaloStepEnergy : 0.0
     # MinimumCrvStepEnergy : 0.1
     # MinimumCrvSteps : 1
     # MinimumPartMom : 50.0 # MeV/c 50
     # MaximumPartMom : 1.0e6 # MeV/c
     # KeepPDG : [ ] # Loop at steps from all particle types
     # MinimumTrkSteps : 12 # primary must produce at least this many TrkSteps
      #MinimumSumCaloStepE : 45.0 # or at least this much calo energy 45
    #}
     PrimaryFilter : {
      module_type : DetectorStepFilter
      StrawGasSteps : [ ]
      CaloShowerSteps : [ ]
      CrvSteps : [ "CrvSteps" ]
      MinimumTrkStepEnergy : 1.0e-6 # 1 ev
      MinimumCaloStepEnergy : 0.0
      MinimumCrvStepEnergy : 1.0e-6 # get a real value from CRV experts FIXME!
      MinimumPartMom : 50.0 # MeV/c
      MaximumPartMom : 1.0e6 # MeV/c
      KeepPDG : [ ] # Loop at steps from all particle types
      MinimumTrkSteps : 0 # primary must produce at least this many TrkSteps
      MinimumSumCaloStepE : 0.0 # or at least this much calo energy
    }
    TargetStopResampler : {
      module_type: ResamplingMixer
      readMode            : sequential
      wrapFiles           : true
      fileNames: @nil
      mu2e: {
        writeEventIDs : true
        MaxEventsToSkip: @nil
        debugLevel : 0
        products: {
          genParticleMixer: { mixingMap: [ [ "beamResampler", "" ] ] }
          simParticleMixer: { mixingMap: [ [ "TargetStopFilter", "" ] ] }
          stepPointMCMixer: { mixingMap: [ [ "TargetStopFilter:virtualdetector", ":" ] ] }
          volumeInfoMixer: {
            srInput: "compressPVTargetStops"
            evtOutInstanceName: "eventlevel"
          }
        }
      }
    }

    TargetPiStopResampler : {
      module_type: ResamplingMixer
      readMode            : sequential
      wrapFiles           : true
      fileNames: @nil
      mu2e: {
        writeEventIDs : true
        MaxEventsToSkip: @nil
        debugLevel : 0
        products: {
          genParticleMixer: { mixingMap: [ [ "beamResampler", "" ] ] }
          simParticleMixer: { mixingMap: [ [ "TargetPiStopFilter", "" ] ] }
          stepPointMCMixer: { mixingMap: [ [ "TargetPiStopFilter:virtualdetector", ":" ] ] }
          volumeInfoMixer: {
            srInput: "compressPVTargetPiStops"
            evtOutInstanceName: "eventlevel"
          }
        }
      }
    }

    IPAMuminusStopResampler : {
      module_type: ResamplingMixer
      readMode            : sequential
      wrapFiles           : true
      fileNames: @nil
      mu2e: {
        writeEventIDs : true
        MaxEventsToSkip: @nil
        debugLevel : 0
        products: {
          genParticleMixer: { mixingMap: [ [ "beamResampler", "" ] ] }
          simParticleMixer: { mixingMap: [ [ "IPAStopFilter", "" ] ] }
          stepPointMCMixer: { mixingMap: [ [ "IPAStopFilter:virtualdetector", ":" ] ] }
          volumeInfoMixer: {
            srInput: "compressPVIPAStops"
            evtOutInstanceName: "eventlevel"
          }
        }
      }
    }

    WireGammaStopResampler : {
      module_type: ResamplingMixer
      readMode            : sequential
      wrapFiles           : true
      fileNames: @nil
      mu2e: {
        writeEventIDs : true
        MaxEventsToSkip: @nil
        debugLevel : 0
        products: {
          genParticleMixer: { mixingMap: [ [ "TargetStopResampler", "" ] ] }
          simParticleMixer: { mixingMap: [ [ "WireStopFilter", "" ] ] }
          stepPointMCMixer: { mixingMap: [ [ "WireStopFilter:virtualdetector", ":" ] ] }
          volumeInfoMixer: {
            srInput: "compressPVWireStops"
            evtOutInstanceName: "eventlevel"
          }
        }
      }
    }
  }
  # sequence to create DetectorSteps
  DetStepSequence : [
    @sequence::TrackerMC.StepSim,
    @sequence::CaloMC.StepSim,
    CrvSteps ]
  # sequence to finalize the output
  FinalizeSequence : [  compressDetStepMCs, FindMCPrimary ]

  KeptProducts : [
    "keep mu2e::StrawGasSteps_compressDetStepMCs_*_*",
    "keep mu2e::CaloShowerSteps_compressDetStepMCs_*_*",
    "keep mu2e::CrvSteps_compressDetStepMCs_*_*",
    "keep mu2e::StepPointMCs_compressDetStepMCs_virtualdetector_*",
    "keep mu2e::StepPointMCs_compressDetStepMCs_protonabsorber_*",
    "keep mu2e::StepPointMCs_compressDetStepMCs_stoppingtarget_*",
    "keep mu2e::SimParticlemv_compressDetStepMCs_*_*",
    "keep mu2e::SimParticleart::Ptrmu2e::MCTrajectorystd::map_compressDetStepMCs_*_*",
    "keep mu2e::GenParticles_compressDetStepMCs_*_*",
    "keep mu2e::PrimaryParticle_*_*_*",
    "keep art::EventIDs_*_*_*",
    "keep art::TriggerResults_*_*_*",
    "keep mu2e::StatusG4_*_*_*",
    "keep mu2e::GenEventCount_*_*_*" ,
    "keep mu2e::EventWeight_*_*_*" ]

  analyzers: {
    genCountLogger: { module_type: GenEventCountReader makeHistograms: false }
  }

  PrimaryOutput : {
    module_type : RootOutput
    SelectEvents : [ PrimaryPath ]
    fileName    : @nil
  }
  EndSequence : [ genCountLogger ]
}
# define the main sequence
Primary.PrimarySequence : [ @sequence::Primary.DetStepSequence, PrimaryFilter, @sequence::Primary.FinalizeSequence ]

Primary.PrimaryOutput.outputCommands : [ "drop *_*_*_*", @sequence::Primary.KeptProducts]
Primary.EndPath : [ @sequence::Primary.EndSequence, PrimaryOutput ]
END_PROLOG
