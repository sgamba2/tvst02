# mixing is a special case of digitization, this file just configures the
# aspects unique to mixing
#  Below are the options for mixing (these are hard to find!)
#     sequential -- read the secondary events in order
#     randomReplace -- random with replacement
#     randomLimReplace -- events unique within a primary event
#     randomNoReplace -- events guaranteed to be used once only.
#include "Offline/CommonMC/fcl/prolog.fcl"
#include "Offline/TrackerMC/fcl/prolog.fcl"
#include "Offline/CaloMC/fcl/prolog.fcl"
# the following defines the prescale factors
#include "Production/JobConfig/pileup/prolog.fcl"

BEGIN_PROLOG

# mixer configuration
Mixing : {
  # DetectorStep mixer
  DetStepMixer: {
    module_type         : MixBackgroundFrames
    fileNames           : @nil
    readMode            : sequential
    wrapFiles           : true
    mu2e: {
      protonBunchIntensityTag: "PBISim"
      simStageEfficiencyTags: @nil
      meanEventsPerPOTFactors : []
      writeEventIDs : false
      products: {
        genParticleMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
        simParticleMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
        strawGasStepMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
        caloShowerStepMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
        crvStepMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
      }
      MaxEventsToSkip: @nil
    }
  }
}
Mixing : {
  producers : {
    PBISim : {
      module_type: ProtonBunchIntensityLogNormal
      SDF: @nil
      extendedMean: @nil
      cutMax:@nil
    }
  }
  filters : {
    # mixers for muon stop pileup, beamflash pileup, and neutrals flash pileup
    MuStopPileupMixer : @local::Mixing.DetStepMixer
    EleBeamFlashMixer : @local::Mixing.DetStepMixer
    MuBeamFlashMixer : @local::Mixing.DetStepMixer
    NeutralsFlashMixer : @local::Mixing.DetStepMixer
  }

  StepMixSequence : [ MuStopPileupMixer, EleBeamFlashMixer, MuBeamFlashMixer, NeutralsFlashMixer ]
  # when mixing early events the intensity must be scaled down
  EarlyReductionFactor : 1.0e-2
}
Mixing.PileupMixSequence : [ PBISim, @sequence::Mixing.StepMixSequence ]
Mixing.MixSequence : [ @sequence::Mixing.PileupMixSequence, @sequence::Digitize.DigitizeSequence ]
# override the Trigger 'PrepareDigis' sequence; the mixers must preceed the digi making.  Note CRV doesn't participate in trigger, so isn't included
TrigRecoSequences.artFragmentsGen: [ @sequence::Mixing.PileupMixSequence, @sequence::CommonMC.DigiSim, @sequence::TrackerMC.DigiSim, @sequence::CaloMC.DigiSim ]

END_PROLOG
