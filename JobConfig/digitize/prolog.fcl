#
# Prolog for digitizing detector steps
#
#include "Offline/fcl/TrkCaloDt.fcl"
#include "Offline/fcl/standardServices.fcl"
#include "Offline/TrackerMC/fcl/prolog.fcl"
#include "Offline/CaloMC/fcl/prolog.fcl"
#include "Offline/CRVResponse/fcl/prolog.fcl"
#include "Offline/Filters/fcl/prolog.fcl"
#include "Offline/Compression/fcl/prolog.fcl"
#
# core trigger
#
#include "mu2e_trig_config/core/trigProducers.fcl"
#include "mu2e_trig_config/core/trigFilters.fcl"
#include "mu2e_trig_config/core/trigMCProductionSequences.fcl"
#include "mu2e_trig_config/core/trigSequences.fcl"
#
BEGIN_PROLOG

Digitize: {
  producers : {
    @table::CommonMC.producers
    @table::TrackerMC.DigiProducers
    @table::CaloMC.DigiProducers
    @table::CrvDAQPackage.producers
    @table::TrigProducers.producers
    compressDigiMCs : {
      module_type : CompressDigiMCs
      strawDigiMCTag : @local::DigiCompressionTags.commonStrawDigiMCTag
      crvDigiMCTag : @local::DigiCompressionTags.commonCrvDigiMCTag
      simParticleTags : [ @local::DigiCompressionTags.primarySimParticleTag ]
      mcTrajectoryTag : @local::DigiCompressionTags.primarySimParticleTag
      extraStepPointMCTags : @local::DigiCompressionTags.commonExtraStepPointMCTags
      caloShowerStepTags : @local::DigiCompressionTags.primaryCaloShowerStepTags
      caloShowerSimTag : @local::DigiCompressionTags.commonCaloShowerSimTag
      caloShowerROTag : @local::DigiCompressionTags.commonCaloShowerROTag
      primaryParticleTag : "FindMCPrimary"
      keepAllGenParticles : true
      rekeySimParticleCollection : true
      noCompression : false

      # Unused options
      strawDigiMCIndexMapTag : ""
      crvDigiMCIndexMapTag : ""
      caloClusterMCTag : ""
      crvCoincClusterMCTags : [  ]
      crvStepsToKeep : [ ]
    }
    PBISim : {
      module_type: ProtonBunchIntensityFlat
      mean : 1
      halfWidth : 0
    }
  }

  filters : {
    # filter for Triggerable stream.  These should be events that might have
    # triggered.  The default setting is a particle with enough tracker digis
    # in the right momentum range to be reconstructable as a helix
    # This filter should be overriden as needed for other kinds of primaries (straight cosmics, calo signals, ...)
    #Triggerable : {
    #  module_type : StrawDigiMCFilter
    #  MinNDigis : 15
    #  MinParticleMom : 70.0
    #  MaxParticleMom : 300.0 # nominally particles that can form helices in the tracker
    #  StrawDigiMCCollection : compressDigiMCs
    #  particleTypes : [ 11,-11, 13, -13, 211, -211] # e+-, mu+-, pi+-
    #}
    # Triggerable stream prescaler; stream-dependent

    CosmicFilter: {
    module_type     : CosmicStrawDigiMCFilter
    minNDigis        : 1
    nHitStations : 0
    StrawDigiMCCollection : compressDigiMCs
    }
    TriggerablePrescale : {
      module_type : Prescaler
      prescaleFactor : 1 # by default, don't prescale
      prescaleOffset : 0
    }
    @table::TrigFilters.filters
}

  analyzers: {
    digiCompressionCheck : @local::DigiCompression.Check
  }

  DigitizeSequence : [
    PBISim,
    @sequence::CommonMC.DigiSim,
    @sequence::TrackerMC.DigiSim,
    @sequence::CaloMC.DigiSim,
    @sequence::CrvDAQPackage.CrvDAQSequence,
    compressDigiMCs ]
  UntriggeredSequence : [ CosmicFilter ]
  TriggerableSequence : [
    TriggerablePrescale, Triggerable ]

  TriggerProducts : [
    "keep art::TriggerResults_*_*_*",
    "keep mu2e::KalSeeds_TT*_*_*",
    "keep mu2e::CaloClusters_*_*_*",
    "keep mu2e::TriggerInfo_*_*_*"
  ]

  GeneralProducts : [
    "keep mu2e::CosmicLivetime_*_*_*",
    "keep mu2e::ProtonBunchIntensity*_*_*_*",
    "keep mu2e::EventWindowMarker_*_*_*",
    "keep mu2e::ProtonBunchTimeMC_*_*_*",
    "keep mu2e::ProtonBunchTime_*_*_*",
    "keep mu2e::EventWeight_*_*_*",
    "keep mu2e::StatusG4_*_*_*",
    "keep *_genCounter_*_*"
  ]
  DigiProducts : [
    "keep mu2e::StrawDigis_*_*_*",
    "keep mu2e::StrawDigiADCWaveforms_*_*_*",
    "keep mu2e::CaloDigis_*_*_*",
    "keep mu2e::CrvDigis_*_*_*",
    "keep *_compressDigiMCs_*_*",
    "keep mu2e::StepPointMCs_CosmicResampler_crvStage1_*"
  ]
SignalOutput : {
	     module_type  : RootOutput
	     SelectEvents : ["UntriggeredPath"]
	     fileName : @nil
}
  #
  # Output Stream for events passing relevant triggers
  #
  TriggeredOutput : {
    module_type : RootOutput
    fileName    : @nil
  }
  #
  # Output stream for MC-truth selected events
  #
  TriggerableOutput : {
   module_type : RootOutput
   SelectEvents : [ "TriggerablePath" ] # require events pass 'Triggerable' filter
  fileName    : @nil
 }
  #
  # trigger selections that can be used to finalize the triggerOutput selection, depending on digitization mode and source
  #
  SignalTriggers : [ "*_highP_*" ]  # events with conversion or conversion-like tracks
  TrkTriggers : [ "*_lowP_*","*_ipa_*", "cst*" ] # events useful only for tracker calibration
  CaloTriggers : [ "calo*" ] # events useful only for calo calibration
  DiagTriggers : [ "minBias_*" , "*Helix*M", "*Helix*P"] # events useful for trigger diagnostics

  EndSequence : [digiCompressionCheck]
}
# override the Trigger sequence to prepare digis
TrigRecoSequences.artFragmentsGen : [ @sequence::CommonMC.DigiSim, @sequence::TrackerMC.DigiSim, @sequence::CaloMC.DigiSim ]
Digitize.SignalOutput.outputCommands : [ "drop *_*_*_*",
@sequence::Digitize.DigiProducts]
Digitize.TriggeredOutput.outputCommands : [ "drop *_*_*_*",
  @sequence::Digitize.GeneralProducts,
  @sequence::Digitize.DigiProducts,
  @sequence::Digitize.TriggerProducts ]

Digitize.TriggerableOutput.outputCommands : [ "drop *_*_*_*",
  @sequence::Digitize.GeneralProducts,
  @sequence::Digitize.DigiProducts,
  @sequence::Digitize.TriggerProducts ]

Digitize.Outputs : {
  #TriggeredOutput : @local::Digitize.TriggeredOutput
 # TriggerableOutput : @local::Digitize.TriggerableOutput
SignalOutput : @local::Digitize.SignalOutput
}
# give paths specific numbers outside trigger path range
Digitize.trigger_paths : ["0:DigitizePath", "1:TriggerablePath" ]
Digitize.EndPath : [ @sequence::Digitize.EndSequence ]#, TriggeredOutput, TriggerableOutput

END_PROLOG
