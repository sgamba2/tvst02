#
# Prolog to create pileup particle steps for mixing
#
#include "Offline/TrackerMC/fcl/prolog.fcl"
#include "Offline/CaloMC/fcl/prolog.fcl"
#include "Offline/CRVResponse/fcl/prolog.fcl"
#include "Offline/Filters/fcl/prolog.fcl"
#include "Offline/Compression/fcl/prolog.fcl"
#
BEGIN_PROLOG

Pileup: {
  producers : {
    @table::TrackerMC.StepProducers
    @table::CaloMC.StepProducers
    CrvSteps :{
      @table::CrvSteps
      stepPointsModuleLabels : ["g4run"]
    }

    compressDetStepMCs : {
      module_type : CompressDetStepMCs
      strawGasStepTag : "StrawGasStepMaker"
      caloShowerStepTag : "CaloShowerStepMaker"
      crvStepTag : "CrvSteps"
      simParticleTags : [ "g4run" ]
      debugLevel : 0
      # save StepPoints in VDs, ProtonAbsorber and ST
      stepPointMCTags : [ ] # turn off VD hits for pileup
      compressionOptions : {
        @table::DetStepCompression.extraCompression # remove some intermediate genealogy steps
        keepNGenerations : 1 # only keep SimParticles producing DetectorSteps and their direct parents
      }
      mcTrajectoryTag : "" # no MC Trajectories
    }

    TargetMuonFinder: {
      module_type: "StoppedParticlesFinder"
      particleInput: "g4run"
      particleTypes: [ 13, -13 ]
      physVolInfoInput: "g4run:eventlevel"
      useEventLevelVolumeInfo: true
      stoppingMaterial: "StoppingTarget_Al"
      verbosityLevel: 1
    }
    WireGammaFinder: {
      module_type: "StoppedParticlesFinder"
      particleInput: "g4run"
      particleTypes: [ 22 ]
      physVolInfoInput: "g4run:eventlevel"
      useEventLevelVolumeInfo: true
      stoppingMaterial: "ST_Wires"
      verbosityLevel: 1
    }
    
    TargetPionFinder: {
      module_type: "StoppedParticlesFinder"
      particleInput: "g4run"
      particleTypes: [ 211, -211 ]
      physVolInfoInput: "g4run:eventlevel"
      useEventLevelVolumeInfo: true
      stoppingMaterial: "StoppingTarget_Al"
      verbosityLevel: 1
    }

    IPAMuonFinder : {
      module_type : StoppedParticlesFinder
      particleInput : "g4run"
      useEventLevelVolumeInfo: true
      physVolInfoInput: "g4run:eventlevel"
      stoppingMaterial : "IPAPolyethylene"
      particleTypes : [ 13, -13 ]
      verbosityLevel: 1
    }

    stoppedMuonDaughters: {
      module_type: SimParticleDaughterSelector
      particleInput: "TargetMuonFinder"
      # EMCascade should not be vetoed because we do not re-simulate it
      processes: [ "DIO", "NuclearCapture" ] //TODO
    }

    compressPVTargetStops: {
      module_type: CompressPhysicalVolumes
      volumesInput : "g4run"
      hitInputs : []
      particleInputs : [ "TargetStopFilter" ]
    }
    compressPVWireStops: {
      module_type: CompressPhysicalVolumes
      volumesInput : "g4run"
      hitInputs : []
      particleInputs : [ "WireStopFilter" ]
    }
    compressPVTargetPiStops: {
      module_type: CompressPhysicalVolumes
      volumesInput : "g4run"
      hitInputs : []
      particleInputs : [ "TargetPiStopFilter" ]
    }


    compressPVIPAStops: {
      module_type: CompressPhysicalVolumes
      volumesInput : "g4run"
      hitInputs : []
      particleInputs : [ "IPAStopFilter" ]
    }

    protonTimeOffset : @local::CommonMC.producers.protonTimeOffset

  }
  filters : {
    # filter to select any detectable signal, without time cuts
    EarlyDetStepFilter : {
      module_type : DetectorStepFilter
      StrawGasSteps : [ "StrawGasStepMaker" ]
      CaloShowerSteps : [ "CaloShowerStepMaker" ]
      CrvSteps : [ "CrvSteps" ] # include CRV steps for pileup
      MaximumPartMom : 1e6 # MeV/c
      MinimumPartMom : 0 # MeV/c
      MinimumTrkStepEnergy : 1.0e-6 # 1 ev
      MinimumCaloStepEnergy : 0.0
      MinimumCrvStepEnergy : 1.0e-6 # get a real value from CRV experts FIXME!
      MinimumTrkSteps : 1 # primary must produce at least this many TrkSteps
      MinimumCrvSteps : 1 # primary must produce at least this many TrkSteps
      MinimumSumCaloStepE : 1.0e-2 # or at least this much calo energy
      KeepPDG : [ ] # Loop at steps from all particle types
    }

    TargetStopFilter: {
      module_type: FilterG4Out
      mainHitInputs: []
      extraHitInputs: [ "g4run:virtualdetector" ]
      mainSPPtrInputs: [ "TargetMuonFinder" ]
    }
    WireStopFilter: {
      module_type: FilterG4Out
      mainHitInputs: []
      extraHitInputs: [ "g4run:virtualdetector" ]
      mainSPPtrInputs: [ "WireGammaFinder" ]
    }

    TargetPiStopFilter: {
      module_type: FilterG4Out
      mainHitInputs: []
      extraHitInputs: [ "g4run:virtualdetector" ]
      mainSPPtrInputs: [ "TargetPionFinder" ]
    }


    IPAStopFilter: {
      module_type: FilterG4Out
      mainHitInputs: []
      extraHitInputs: [ "g4run:virtualdetector" ]
      mainSPPtrInputs: [ "IPAMuonFinder" ]
    }

    FlashFilter: {
      module_type: FilterG4Out
      mainHitInputs:  [ "g4run:tracker", "g4run:calorimeter", "g4run:CRV", "g4run:virtualdetector" ]
      vetoParticles:  [ "stoppedMuonDaughters" ]
    }

    TargetStopPrescaleFilter : {
      module_type : RandomPrescaleFilter
    }
    EarlyPrescaleFilter : {
      module_type : RandomPrescaleFilter
    }

    # resamplers

    beamResampler: {
      module_type: ResamplingMixer
      fileNames: @nil
      readMode: "sequential"
      wrapFiles: true
      mu2e: {
        writeEventIDs : true
        MaxEventsToSkip: @nil
        debugLevel : 0
        products: {
          genParticleMixer: { mixingMap: [ [ "generate", "" ] ] }
          simParticleMixer: { mixingMap: [ [ "BeamFilter", "" ] ] }
          stepPointMCMixer: { mixingMap: [
              [ "BeamFilter:virtualdetector", ":" ],
              [ "BeamFilter:Beam", ":" ]
            ] }
          simTimeOffset : "protonTimeOffset"
          volumeInfoMixer: {
            srInput: "compressPVBeam"
            evtOutInstanceName: "eventlevel"
          }
        }
      }
    }

    neutralsResampler: {
      module_type: ResamplingMixer
      fileNames: @nil
      readMode: "sequential"
      wrapFiles: true
      mu2e: {
        writeEventIDs : true
        MaxEventsToSkip:  @nil
        debugLevel : 0
        products: {
          genParticleMixer: { mixingMap: [ [ "generate", "" ] ] }
          simParticleMixer: { mixingMap: [ [ "NeutralsFilter", "" ] ] }
          stepPointMCMixer: { mixingMap: [
              [ "NeutralsFilter:Neutrals", ":" ]
            ] }
          simTimeOffset : "protonTimeOffset"
          volumeInfoMixer: {
            srInput: "compressPVNeutrals"
            evtOutInstanceName: "eventlevel"
          }
        }
      }
    }
  }

  Output : {
    module_type : RootOutput
    SelectEvents : [ PileupPath ]
    fileName    : @nil
    # drop StepPoints from calorimeter
  }
  # define paths
  EndPath : [ genCountLogger, Output ]

  # define tools used in mustop daughter generation
  dioGenTool : {
    tool_type : DIOGenerator
    spectrum : {
      spectrumShape : Czarnecki
      pdgId : 11 # Czarnecki option in BinnedSpecturm needs pdgId here
      elow : 1. #MeV
      spectrumResolution : 0.1 #MeV
    }
  }

  muonCaptureProtonGenTool : {
    tool_type : MuCapProtonGenerator
    spectrumVariable : kineticEnergy
    spectrum : {
      spectrumShape : ejectedProtons
      nbins: 1000
    }
  }

  muonCaptureDeuteronGenTool : {
    tool_type : MuCapDeuteronGenerator
    spectrumVariable : kineticEnergy
    spectrum : {
      spectrumShape : ejectedProtons
      nbins: 1000
    }
  }

  muonCaptureNeutronGenTool : {
    tool_type : MuCapNeutronGenerator
    spectrumVariable: kineticEnergy
    spectrum: {
      spectrumShape: tabulated
      spectrumFileName: "Offline/ConditionsService/data/neutronSpectrum.txt"
    }
  }

  muonCapturePhotonGenTool : {
    tool_type : MuCapPhotonGenerator
    spectrum : {
      spectrumShape: flat
      elow: 0.0 # MeV
      ehi: 7.0  # MeV
    }
  }

  # An example that isn't used in this fcl
  #muonCapture1809keVGammaGenTool : {
  #  tool_type : MuCap1809keVGammaGenerator
  #}

  #
  # define products that need to be kept
  #
  SimKeptProducts : [
    "keep art::EventIDs_*_*_*",
    "keep mu2e::GenParticles_*_*_*",
    "keep mu2e::GenEventCount_*_*_*",
    "keep mu2e::StatusG4_*_*_*"
  ]

  DtsKeptProducts : [
    "keep art::EventIDs_*_*_*",
    "keep mu2e::GenEventCount_*_*_*",
    "keep mu2e::StatusG4_*_*_*",
    "keep mu2e::SimParticleart::Ptrdoublestd::map_*_*_*",
    "keep mu2e::StrawGasSteps_compressDetStepMCs_*_*",
    "keep mu2e::CaloShowerSteps_compressDetStepMCs_*_*",
    "keep mu2e::CrvSteps_compressDetStepMCs_*_*",
    "keep mu2e::SimParticlemv_compressDetStepMCs_*_*",
    "keep mu2e::GenParticles_compressDetStepMCs_*_*" ]
  # define some common sequences
  beamResamplerSequence : [genCounter, protonTimeOffset, beamResampler]
  neutralsResamplerSequence : [genCounter, protonTimeOffset, neutralsResampler]
  flashSequence : [ TargetMuonFinder, stoppedMuonDaughters, FlashFilter ]
  DetStepSequence : [
    @sequence::TrackerMC.StepSim,
    @sequence::CaloMC.StepSim,
    CrvSteps , DetStepFilter, compressDetStepMCs ]
  EarlyDetStepSequence : [
    EarlyPrescaleFilter,
    @sequence::TrackerMC.StepSim,
    @sequence::CaloMC.StepSim,
    CrvSteps , EarlyDetStepFilter, compressDetStepMCs ]
  #
  #  Define the prescale values used in the various resamplers
  #
  EarlyEleBeamFlashPrescale : 1000
  EarlyMuBeamFlashPrescale : 30
  EarlyNeutralsFlashPrescale : 20
  MuminusTargetStopPrescale : 1000
}
# DetctorStepFilter instance to select DetSteps outside the flash
Pileup.filters.DetStepFilter : {
  @table::Pileup.filters.EarlyDetStepFilter
  # select energy deposits after the peak of the flash has passed, to keep useless payload down
  # Note the cut excludes hits before the digitization lower edge and after the MBtime + digitization upper edge
  TimeCutConfig : {
    MinimumTime : 250 # good hits are after this time
    MaximumTime : 10 # not a typo: good hits are before this time
  }
}

END_PROLOG
